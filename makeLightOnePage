#!/usr/bin/ruby
# This is makeLightOnePage, a branch of makeLight. It makes ONE page
# Like makerLight, no JAVASCRIPT, and a lot of other differences, too. 
#
class Page
  require 'erb'
  Template = <<-END_OF_TEMPLATE
  <!DOCTYPE html>
  <html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title><%= TITLE %></title> 
    <meta name="description" content="<%= DESCRIPTION %>">
    <meta name="robots" content="index,follow">
    <%= stylesheet %>
  </head>
  <body>
    <header>
      <%= content :header %>
    </header>
    <main>
      <%= content :main %>
    </main>
    <footer>
      <%= content :footer %>
    </footer>
  </body>
  </html>
  END_OF_TEMPLATE
  
  def content( filename = nil ) # Returns block of ERB'd html
    if filename
      fqfn = '../content/'  + filename.to_s + '.html'
      if ! File.exist? fqfn
        `touch #{fqfn}` # create a blank file if no file exists
      end
      ERB.new( File.read( fqfn ) ).result(binding)
    else
      raise 'File name argument was not passed to "content" method, or was nil'
    end
  end
  def stylesheet # Used in HEAD section
      fqfn = '../content/'  + DOMAIN + '.css'
      if ! File.exist? fqfn
        `touch #{fqfn}` # create a blank file if no file exists
      end
      return "<style>\n" + File.read( fqfn ) + "\n</style>\n"
  end
  def single_link( html_file, display_text)
    link = %{<a href="#{html_file.to_s}.html">#{display_text}</a>\n}
  end
  def headline
    %{ <h1 id="headline">\n#{content :headline}\n</h1>\n }
  end
  def deck
    %{ <h2 id="deck">\n#{content :deck}\n</h2>\n }
  end
  def banner_image( image_file )
    %{ <img
      id="banner_image"
      src=#{image_file}
      alt="">
    }
  end
  def section( section_name ) #section/article name is a symbol
    %{ <section id="#{section_name}">\n#{content section_name}\n</section>\n }
  end
  def article( article_name ) #section/article name is a symbol
    %{ <article id="#{article_name}">\n#{content article_name}\n</article>\n }
  end
  def div( div_id )
    %{<div id="#{div_id}">\n#{content div_id.to_sym}\n</div>\n}
  end
  def sidebar
    %{<div id="sidebar">\n#{content :sidebar}\n</div>\n}
  end
  def gallery( dir )
    # dir must end with slash
    paragraph_set = ""
    Dir.glob(%{../public/#{dir}*}).each do |file|
      paragraph_set += %{<img src="#{dir}#{File.basename( file )}">}
    end
    return paragraph_set
  end
  def gallery_ordered( image_list, source_dir )
    output = ""
    image_list.split("\n").each do |image_name|
      output += %{<img src="#{source_dir}#{image_name}">}
      output += "\n"
    end
    return output
  end
  def ul( simple_list, id_attribute=nil, class_attribute=nil )
    html = %{<ul id="#{id_attribute}" class="#{class_attribute}">\n}
    simple_list.split("\n").each do |item|
      html << '<li>' + item.to_s + '</li>' + "\n"
    end
    html << '</ul>'
  end
  def website_credit
    "<p id='website_credit'
    style=
    'text-align: right;
    margin-right: 2em;
    font-size: 11pt;
    font-family: sans-serif;
    font-style: italic;
    '>Website by Atascadero Web Design</p>"
  end
  def write_to_disk
    File.open( FQFN, 'w') do |fh|
      fh.write( ERB.new( Template ).result(binding) )
      File.chmod( 0604, FQFN )
    end
  end
end
  
begin
  require Dir.pwd + '/site_specs'; include Site_specs
  Page.new.write_to_disk
rescue Exception => e
  puts e.message << "\n" << e.backtrace.first
end

#   def par_DISABLED( simple_list, id_attribute=nil, class_attribute=nil )
#     html = %{<p id="#{id_attribute}" class="#{class_attribute}">\n}
#     simple_list.split("\n").each do |item|
#       html << item.to_s + '</p>' + "\n"
#     end
#     html
#   end
